[tool:pytest]
# Pytest configuration for brainsait-store backend
minversion = 6.0

# Test discovery
testpaths = tests
python_files = test_*.py *_test.py
python_functions = test_*
python_classes = Test*

# Output formatting
addopts = 
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --cov=app
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml
    --cov-fail-under=80
    --durations=10

# Markers for test categorization
markers =
    unit: Unit tests that don't require external dependencies
    integration: Integration tests that require database or external services
    api: API endpoint tests
    db: Tests that require database connection
    slow: Tests that take a long time to run
    auth: Tests related to authentication and authorization
    payment: Tests related to payment processing
    notification: Tests related to notifications
    analytics: Tests related to analytics and reporting
    performance: Performance and load tests
    security: Security-related tests

# Asyncio configuration
asyncio_mode = auto

# Filtering
filterwarnings =
    error
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore:.*unclosed.*:ResourceWarning

# Test environment
env =
    TESTING=true
    DATABASE_URL=sqlite+aiosqlite:///./test.db
    SECRET_KEY=test-secret-key-for-testing
    ENVIRONMENT=test
    LOG_LEVEL=WARNING

# Coverage configuration
[coverage:run]
source = app
omit = 
    app/__init__.py
    app/main.py
    */tests/*
    */migrations/*
    */venv/*
    */__pycache__/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod
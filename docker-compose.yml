version: '3.8'

services:
  # PostgreSQL Database with Multi-tenant Support
  postgres:
    image: postgres:15-alpine
    container_name: brainsait_postgres
    environment:
      POSTGRES_DB: brainsait_b2b
      POSTGRES_USER: brainsait
      POSTGRES_PASSWORD: ${DB_PASSWORD:-SecurePassword123!}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U brainsait"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - brainsait_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: brainsait_redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-RedisPassword123!}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - brainsait_network

  # Backend API (FastAPI)
  backend:
    build:
      context: ./backend
      dockerfile: ../infrastructure/docker/Dockerfile.backend
    container_name: brainsait_backend
    environment:
      DATABASE_URL: postgresql+asyncpg://brainsait:${DB_PASSWORD:-SecurePassword123!}@postgres/brainsait_b2b
      REDIS_URL: redis://:${REDIS_PASSWORD:-RedisPassword123!}@redis:6379/0
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-here-change-in-production}
      ENVIRONMENT: ${ENVIRONMENT:-development}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      MADA_API_KEY: ${MADA_API_KEY}
      CLOUDFLARE_API_TOKEN: ${CLOUDFLARE_API_TOKEN}
    volumes:
      - ./backend/app:/app
      - ./backend/alembic:/alembic
      - backend_logs:/logs
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - brainsait_network
    restart: unless-stopped

  # Frontend (Next.js)
  frontend:
    build:
      context: ./frontend
      dockerfile: ../infrastructure/docker/Dockerfile.frontend
    container_name: brainsait_frontend
    environment:
      NEXT_PUBLIC_API_URL: http://backend:8000
      NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${STRIPE_PUBLISHABLE_KEY}
      NEXT_PUBLIC_MADA_MERCHANT_ID: ${MADA_MERCHANT_ID}
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - brainsait_network
    restart: unless-stopped

  # n8n Workflow Automation
  n8n:
    image: n8nio/n8n:latest
    container_name: brainsait_n8n
    environment:
      N8N_BASIC_AUTH_ACTIVE: "true"
      N8N_BASIC_AUTH_USER: ${N8N_USER:-admin}
      N8N_BASIC_AUTH_PASSWORD: ${N8N_PASSWORD:-N8nPassword123!}
      N8N_HOST: ${N8N_HOST:-localhost}
      N8N_PORT: 5678
      N8N_PROTOCOL: http
      WEBHOOK_URL: ${N8N_WEBHOOK_URL:-http://localhost:5678}
      N8N_ENCRYPTION_KEY: ${N8N_ENCRYPTION_KEY}
      DB_TYPE: postgresdb
      DB_POSTGRESDB_HOST: postgres
      DB_POSTGRESDB_PORT: 5432
      DB_POSTGRESDB_DATABASE: n8n
      DB_POSTGRESDB_USER: brainsait
      DB_POSTGRESDB_PASSWORD: ${DB_PASSWORD:-SecurePassword123!}
    volumes:
      - n8n_data:/home/node/.n8n
      - ./automation/n8n/workflows:/workflows
    ports:
      - "5678:5678"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - brainsait_network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: brainsait_nginx
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infrastructure/nginx/sites:/etc/nginx/sites-enabled
      - nginx_logs:/var/log/nginx
      - ./infrastructure/ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
      - frontend
    networks:
      - brainsait_network
    restart: unless-stopped

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: brainsait_prometheus
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    networks:
      - brainsait_network
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: brainsait_grafana
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-GrafanaPassword123!}
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./infrastructure/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - brainsait_network
    restart: unless-stopped

  # MinIO S3-compatible storage (for local development)
  minio:
    image: minio/minio:latest
    container_name: brainsait_minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-MinioPassword123!}
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - brainsait_network
    restart: unless-stopped

  # Coolify Agent (for deployment management)
  coolify:
    image: ghcr.io/coollabsio/coolify:latest
    container_name: brainsait_coolify
    environment:
      COOLIFY_APP_ID: ${COOLIFY_APP_ID}
      COOLIFY_SECRET_KEY: ${COOLIFY_SECRET_KEY}
      COOLIFY_DATABASE_URL: postgresql://brainsait:${DB_PASSWORD:-SecurePassword123!}@postgres/coolify
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - coolify_data:/data
    ports:
      - "8080:3000"
    networks:
      - brainsait_network
    restart: unless-stopped

networks:
  brainsait_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16

volumes:
  postgres_data:
  redis_data:
  n8n_data:
  backend_logs:
  nginx_logs:
  prometheus_data:
  grafana_data:
  minio_data:
  coolify_data:
